// Abstract class Shape
abstract class Shape {
    abstract void draw();
    abstract double area();
}

// Subclass Rectangle
class Rectangle extends Shape {
    private double length, width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    void draw() { System.out.println("Drawing a Rectangle"); }
    double area() { return length * width; }
}

// Subclass Triangle
class Triangle extends Shape {
    private double base, height;

    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    void draw() { System.out.println("Drawing a Triangle"); }
    double area() { return 0.5 * base * height; }
}

// Subclass Circle
class Circle extends Shape {
    private double radius;

    public Circle(double radius) { this.radius = radius; }

    void draw() { System.out.println("Drawing a Circle"); }
    double area() { return Math.PI * radius * radius; }
}

// Main class to demonstrate dynamic method dispatch
public class ShapeDemo {
    public static void main(String[] args) {
        Shape[] shapes = {
            new Rectangle(5, 3),
            new Triangle(4, 6),
            new Circle(2.5)
        };

        for (Shape shape : shapes) {
            shape.draw();
            System.out.printf("Area: %.2f%n%n", shape.area());
        }
    }
}
